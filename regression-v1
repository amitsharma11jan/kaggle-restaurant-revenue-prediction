#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 18 19:28:37 2017

@author: a5sharma
"""

import os
import pandas as pd
from sklearn.grid_search import GridSearchCV
from sklearn import neighbors
from sklearn.metrics import fbeta_score, make_scorer, mean_squared_error
import numpy as np

#returns current working directory
os.getcwd()
#changes working directory
os.chdir("/Users/a5sharma/Downloads/Kaggle/rest_revenue")

rest_train = pd.read_csv("train.csv")
rest_test = pd.read_csv("test.csv")

rest_train.info()
rest_test.info()


rest_train.shape
rest_test.shape

rest_train.apply(lambda x:sum(x.isnull()))
rest_test.apply(lambda x:sum(x.isnull()))

rest_train1 = pd.get_dummies(rest_train, columns=['City Group','Type'])
rest_train1.info()

rest_train1.drop(['Id','Open Date','City','revenue'],axis=1,inplace=True)

X_train = rest_train1
Y_train = rest_train['revenue']

param_grid = dict(n_neighbors=[3,4,5,6,7], weights=['uniform','distance'])

knn_est = neighbors.KNeighborsRegressor()

#This will not give RMSE
grid_est = GridSearchCV(estimator=knn_est, param_grid=param_grid, cv=10, verbose=1, n_jobs=10)
grid_est.fit(X_train, Y_train)
grid_est.grid_scores_



#This will not give RMSE..but give in Mean Squared Error
grid_est = GridSearchCV(estimator=knn_est, param_grid=param_grid, cv=10, verbose=1, n_jobs=10, scoring=make_scorer(mean_squared_error))
grid_est.fit(X_train, Y_train)
grid_est.grid_scores_

from sklearn.metrics import r2_score, mean_squared_error
secret_mses = []

def calc_rmse(estimator, X_test, Y_test):
    predictions = estimator.predict(X_test)
    secret_mses.append(mean_squared_error(Y_test, predictions))
    return r2_score(Y_test, predictions)


#This will not give RMSE..but give in Mean Squared Error
grid_est = GridSearchCV(estimator=knn_est, param_grid=param_grid, cv=10, verbose=1, n_jobs=10, scoring='mean_squared_error')
grid_est.fit(X_train, Y_train)
grid_est.grid_scores_

grid_est = GridSearchCV(estimator=knn_est, param_grid=param_grid, cv=10, verbose=1, n_jobs=10, scoring=calc_rmse)
grid_est.fit(X_train, Y_train)
grid_est.grid_scores_
grid_est.best_score_
grid_est.best_params_

from sklearn.model_selection import cross_val_score
r2_scores = cross_val_score(knn_est, X_train, Y_train, scoring=calc_rmse, cv=5)



rest_test1 = pd.get_dummies(rest_test, columns=['City Group','Type'])
rest_test1.info()

rest_test1.drop(['Id','Open Date','City'],axis=1,inplace=True)
X_test = rest_test1
rest_test['revenue'] = grid_est.predict(X_test)



X_train.info()
